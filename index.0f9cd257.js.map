{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,SAAS,EAAY,CAAW,EAC9B,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAW,SAAS,aAAa,CAAC,GAAa,IAAI,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAEzD,IAAI,CAAA,EAAK,MAAM,EAAI,CAAA,GAId,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,I,EAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAmB,CAAnB,IAAM,EAAN,EAAA,KAAA,CACG,EAAa,EAAI,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA,GAE1C,EAAI,YAAY,CAAC,EAAY,EAAI,KAAK,CAAC,EAAI,KAAK,CAAC,MAAM,CAAG,EAAE,CAC9D,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,EAKP,CAEA,EAAY,SACZ,EAAY,SACZ,EAAY","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write your code here\nfunction formatCells(partOfTable) {\n    var rows = _to_consumable_array(document.querySelector(partOfTable).rows);\n    if (rows.length <= 0) return;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var clonedCell = row.cells[1].cloneNode(true);\n            row.insertBefore(clonedCell, row.cells[row.cells.length - 1]);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nformatCells(\"thead\");\nformatCells(\"tbody\");\nformatCells(\"tfoot\");\n\n//# sourceMappingURL=index.0f9cd257.js.map\n","'use strict';\n\n// write your code here\n\nfunction formatCells(partOfTable) {\n  const rows = [...document.querySelector(partOfTable).rows];\n\n  if (rows.length <= 0) {\n    return;\n  }\n\n  for (const row of rows) {\n    const clonedCell = row.cells[1].cloneNode(true);\n\n    row.insertBefore(clonedCell, row.cells[row.cells.length - 1]);\n  }\n}\n\nformatCells('thead');\nformatCells('tbody');\nformatCells('tfoot');\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","formatCells","partOfTable","rows","_array_without_holes","isArray","document","querySelector","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","row","value","clonedCell","cells","cloneNode","insertBefore","err","return"],"version":3,"file":"index.0f9cd257.js.map"}